# Стандарт API 

## API design mandate

1. Оперируйте сущностями, а не имплементации
1. Используйте операции для отображения статуса асинхронных действий
1. Думайте о безопасности своих интерфейсов так, как будто они доступны из интернета
1. Не используйте недокументированные интерфейсы (API) других команд
1. Не используйте API для которых не предоставляются гарантии доступности и совместимости
1. Не проксируйте в свой интерфейс сущности своих зависимостей
1. Не предоставляйте методы API меняющие состояние без авторизации
1. Не используйте RPC семантику в URL, оперируйте только REST сущностями или операциями
1. Используйте паттерн -- при выполнении сложных многосоставных операций
1. Используйте возврат объектов отслеживания асинхронных операций 
1. Все длительные асинхронные операции следует делать прерываемыми 
1. Не возвращайте в API ошибки, если пользовательский сценарий не окончен и их невозможно или нельзя обработать

## Введение

**API** – это спецификация, описывающая как клиент должен формировать запросы на получение и изменение ресурсов, а сервер отвечать на эти запросы.

## Соглашения

В документах описывающих стандарты, используются модальные глаголы для обозначения уровня требований. Такие слова выделяются заглавными буквами. В этом документе определяется толкование этих глаголов и производных от них слов. 

- *НЕОБХОДИМО*

Или ТРЕБУЕТСЯ, НУЖНО и ДОЛЖЕН – для требований, которые являются абсолютно необходимыми в данном соглашении.

- *НЕДОПУСТИМО*

Или НЕ ПОЗВОЛЯЕТСЯ – абсолютный запрет в рамках соглашения.

- *СЛЕДУЕТ*

Или РЕКОМЕНДУЕТСЯ – для обозначения требований, от выполнения которых можно отказаться при наличии причин. Однако при этом, следует помнить о возможных проблемах и принимать взвешенное решение.

- *НЕ СЛЕДУЕТ*

Или НЕ РЕКОМЕНДУЕТСЯ – применительно к особенностям или функциям, которые допустимы и могут быть полезными, но могут вызывать проблемы. При реализации таких опций следует принимать взвешенное решение.

- *ВОЗМОЖНО*

Или НЕОБЯЗАТЕЛЬНЫЙ – обозначают элементы, реализация которых является необязательной. 

## Структура документа

В этом разделе описывается структура json-документа.

Если не указано иное, определенные здесь объекты, НЕ ДОЛЖНЫ содержать дополнительных параметров. Реализации клиента и сервера ДОЛЖНЫ игнорировать параметры, отличные от указанных.

### Типы параметров

|Тип |Описание|
|---|---|
|строка|строковое значение произвольной длины|
|число|целое число или число с плавающей точкой|
|Array&lt;type&gt;|Массив объектов типа type|
|null|Неопределенное (пустое) значение|
|boolean|Булево значение (true/false)|

### Общая структура документа

Документ должен представлять собой корректный JSON-документ описанный в спецификации --.

На верхнем уровне – JSON может являться представлением одного из допустимых встроенных типов объекта. Также, может являться определяемым данной спецификацией, или одним из типов ресурса определенных сервером.

#### Resource object

Resource object – базовый блок всех объектов описанных в спецификации, а также любых объектов определенных сервером. Все объекты унаследованные от resource object определяют два типа атрибутов:

- *Служебные* – определяют данные необходимые для получения и изменения объекта. Содержат мета-информацию об объекте, либо выполняют какую-либо функцию. Служебные атрибуты, не являются частью состояния ресурсов на сервере. Служебные атрибуты выносятся на верхний уровень в объекте.

- *Сущностные* – описывают свойства доменных сущностей сервера и не могут нести в себе служебную информацию. Описываются внутри **attributes** свойства находящегося на верхнем уровне в ресурсе. Если сущностных атрибутов нет, то и атрибута **attributes** также не будет.

Любой из встроенных или определенных сервером объектов наследуется от Resource object и ДОЛЖЕН определять параметры:

|Параметр|Тип| Описание|
|---|---|---|
|kind|строка|Тип объекта, описанный латиницей в CapitalCase, например &#34;Page&#34;, &#34;Collection&#34;, &#34;Error&#34;, &#34;Document&#34;|

МОГУТ быть определены параметры:

|Параметр|Тип|Описание|
|---|---|---|
|self|строка (URL)|Абсолютная ссылка на ресурс. Запрос сделанный по данной ссылке возвращает представление данного ресурса|
|metadata|JSON|Дополнительная служебная информация. Произвольный JSON. В metadata вносят служебные данные, которые могут быть полезны на клиенте в контексте выполняемого запроса, но: <br /> 1) определяются исключительно на сервере, и не могут быть изменены запросом с клиента<br /> 2) не являются непосредственными атрибутами ресурса<br /> Например, дата/время создания или изменения ресурса, юзер создавший ресурс, и т.п.|
|schema|строка URL [JSON schema]|Ссылка на схему описывающую ресурс в формате JSON schema|
|attributes|JSON|Описание сущностных атрибутов ресурса|
|dependencies|JSON|Связи объекта вида providedBy, usedBy|

#### Встроенные типы объектов

<details>
<summary>Ссылка (kind=Reference)</summary>

В случаях, когда необходимо возвращать лишь уникальный идентификатор описывающий объект, используется resource reference object. Каждый объект Reference ДОЛЖЕН определять параметры:

|Параметр|Обязательный|Описание|
|--|--|--|
|kind|строка = Reference|да|Тип ресурса. В этом случае это тип Reference|
|resourceKind|строка|да|Тип ресурса на который ведет ссылка|
|identifier|AttributeIdentifier|да|Идентификатор ресурса (см ниже)|

AttributeIdentifier

|Параметр|Тип|Обязательный|Описание|
|--|--|--|--|
|name|строка|да|Имя уникального атрибута в ресурсе|
|value|строка/число|да|Значение идентификатора|

</details>
<details>
<summary>Ошибка(kind=Error)</summary> 

Все ошибки сервера, ошибки бизнес-логики или инфраструктуры, ДОЛЖНЫ возвращаться в ресурсе с типом kind=Error. НЕ ДОПУСКАЕТСЯ возвращать данный тип ресурса вместе с кодом ответа HTTP &lt; 400

|Параметр|Тип|Обязательный|Описание|
|--|--|--|--|
|kind|строка = Error|да|Описание типа ресурса|
|code|строка| да|Код ошибки определяемый приложением|
|userError|строка|да|Ошибка, которая отображается клиенту|
|systemError|строка|нет|Ошибка, имеющая смысл для разработчика|
|detail|JSON value|нет|Произвольное значение JSON описывающее детали ошибки|
</details>

<details>
<summary>Коллекция (kind=Collection)</summary>

Коллекция — это встроенный объект, представление отображающее один и более объектов других типов. Коллекция МОЖЕТ включать в себя типы определенные сервером, тип Reference и другие коллекции. Коллекция НЕ ДОЛЖНА включать в себя типы объектов Error и Page. Коллекция должна определять параметры:

|Параметр|Тип|Обязательный|Описание|
|--|--|--|--|
|kind|строка = Collection|да|Описание типа ресурса|
|contents|Array&lt;Resource object|Reference&gt;|да|Коллекция ресурсов унаследованных от Resource object, кроме Error, Page|
</details>
<details>
<summary>Страница (kind=Page)</summary>

Page — встроенный объект, страница в постраничной выборке. Если коллекция представляет всю выборку, то страница представляет лишь ее часть. Страница ДОЛЖНА содержать выборку ресурсов только из типов определенных сервером. Страниц коллекций или страниц ошибок быть не может. Каждая страница ДОЛЖНА включать параметры:

|Параметр|Тип|Обязательный|Описание|
|--|--|--|--|
|kind|строка = Page|да|Описание типа ресурса|
|pageOf|строка (URL)|да|Ссылка на коллекцию, часть которой представляет данная страница|
|total|число (целое)|да|Общее количество результатов в коллекции|
|contents|Array&lt;Resource object&gt;|да|Выборка ресурсов представляемых этой страницей|
</details>
<details>
<summary>Операция (kind=Operation)</summary>

Операция — встроенный объект, описывает long-running операцию запущенную в результате API вызова. Каждый объект Operation включает в себя параметры:

|Параметр|Тип|Обязательный|Описание|
|--|--|--|--|
|kind|строка = Operation|да|Описание типа ресурса|
|metadata|JSON value|нет|Произвольный JSON содержащий служебные метаданные|
|id|строка uuid4|да|Уникальный идентификатор операции|
|start|строка|да|timestamp времени начала операции по ISO 8601 — дата и время с указанием часового пояса|
|done|boolean|да|Если операция всё еще выполняется и возвращает false, если операция выполнена и возвращает true|
|status|строка|да|Отражает человеко-читаемое текущее состояние операции, произвольная строка|
|result|(Error|JSON)|да|В случае ошибки во время выполнения операции в result ДОЛЖЕН быть записан объект типа kind = Error. В случае успеха, в результате МОЖЕТ быть записан любой поддерживаемый спецификацией тип объекта унаследованный от Resource object, а также произвольный JSON|
</details>

